package Blockchain;


import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.response.EthGetBalance;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.Contract;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;


import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Locale;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class SmartContractConnection {
    public static <bal> void main(String[] args) throws Exception {

        BigInteger gasPrice = BigInteger.valueOf(20000000000L);
        BigInteger gasLimit = BigInteger.valueOf(6721975L);
        Web3j client = Web3j.build(new HttpService("http://localhost:7545"));
        String contractAddress = "0x1BBfcDb27d7aB7fE1F7C8B20Ce41cf74d7d54Ce6";
        String abi = Files.readString(Path.of("/Users/ajinkyarajguru/Documents/Topics_in_DB/DecentralizedStore/src/main/resources/Solidity/FileStore.abi"), Charset.defaultCharset());
        String bytecode = "";
        Credentials credentials = Credentials.create("0x0e77fc49806f625e4486455a1e4c3ef3565552583617364232935e26ec50285b");
        TransactionManager transactionManager = new RawTransactionManager(client,credentials);

        Transfer transfer = new Transfer(client,transactionManager);
        TransactionReceipt transactionReceipt = transfer.sendFunds(
                "0x77B7A36EE890a3eb085D4f19201fa0cE91166Cfd",
                BigDecimal.ONE,
                Convert.Unit.ETHER,
                gasPrice,
                gasLimit
        ).send();



        final String add = "0xA9aD9dF286B94c602Fa9989bc819c651376657f5";
        EthGetBalance bal = client.ethGetBalance(add, DefaultBlockParameter.valueOf("latest")).sendAsync().get(10, TimeUnit.SECONDS);


        BigInteger balresp = bal.getBalance();
        System.out.println(balresp);
//    HelloWorld helloWorld = HelloWorld.load("your_contract_address", web3j, Credentials.create("your_private_key"), new DefaultGasProvider());
// if (helloWorld.isValid()) {
//        greeting = helloWorld.greeting().send();
//    }
// web3j.shutdown();
    }
}
